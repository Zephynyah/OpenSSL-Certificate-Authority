{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"OpenSSL Certificate Authority","text":"<p>This guide demonstrates how to act as your own certificate authority (CA) using the OpenSSL command-line tools. This is useful in a number of situations, such as issuing server certificates to secure an intranet website, or for issuing certificates to clients to allow them to authenticate to a server.</p> <ul> <li>Introduction</li> <li>Create the root pair</li> <li>Create the intermediate pair</li> <li>Sign server and client certificates</li> <li>Certificate revocation lists</li> <li>Online Certificate Status Protocol</li> <li>Appendix</li> </ul> <p>See full table of contents.</p>"},{"location":"about/","title":"Introduction","text":"<p>OpenSSL is a free and open-source cryptographic library that provides several command-line tools for handling digital certificates.  Some of these tools can be used to act as a certificate authority.</p> <p>A certificate authority (CA) is an entity that signs digital certificates.  Many websites need to let their customers know that the connection is secure, so they pay an internationally  trusted CA (eg, VeriSign, DigiCert) to sign a certificate for their domain.</p> <p>In some cases it may make more sense to act as your own CA, rather than paying a CA like DigiCert.  Common cases include securing an intranet website, or for issuing certificates to clients to allow  them to authenticate to a server (eg, Apache, Nginx, OpenVPN).</p>"},{"location":"about/license/","title":"License","text":"<p>The legal stuff.</p>"},{"location":"about/license/#included-projects","title":"Included projects","text":"<p>Themes used under license from the ReadTheDocs projects.</p> <ul> <li>ReadTheDocs theme - View license.</li> </ul> <p>Many thanks to the authors and contributors of those wonderful projects.</p>"},{"location":"about/license/#mit-license","title":"MIT License","text":"<p>Copyright (c) 2024 Zephynyah</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>"},{"location":"about/release-notes/","title":"Release Notes","text":""},{"location":"about/release-notes/#upgrading","title":"Upgrading","text":"<p>To upgrade Zeph-OCA to the latest version, use git:</p> <pre><code>git clone https://github.com/Zephynyah/zeph-opensll-certificate-authority.git\n</code></pre> <p>You can determine your currently installed version using README.md:</p> <pre><code>\n</code></pre>"},{"location":"about/release-notes/#maintenance-team","title":"Maintenance team","text":"<p>The current and past members of the MkDocs team.</p> <ul> <li>@zephynyah</li> </ul>"},{"location":"about/release-notes/#version-010-2024-07-10","title":"Version 0.1.0 (2024-07-10)","text":""},{"location":"about/release-notes/#local-preview","title":"Local preview","text":""},{"location":"appendix/","title":"Appendix","text":"<p>A. Root CA configuration file</p> <p>B. Intermediate CA configuration file</p>"},{"location":"appendix/intermediate-configuration/","title":"Intermediate CA Configuration File","text":"<p>View this file as plain text.</p> <pre><code># OpenSSL intermediate CA configuration file.\n# Copy to `/root/ca/intermediate/openssl.cnf`.\n\n[ ca ]\n# `man ca`\ndefault_ca = CA_default\n\n[ CA_default ]\n# Directory and file locations.\ndir               = /root/ca/intermediate\ncerts             = $dir/certs\ncrl_dir           = $dir/crl\nnew_certs_dir     = $dir/newcerts\ndatabase          = $dir/index.txt\nserial            = $dir/serial\nRANDFILE          = $dir/private/.rand\n\n# The root key and root certificate.\nprivate_key       = $dir/private/intermediate.key.pem\ncertificate       = $dir/certs/intermediate.cert.pem\n\n# For certificate revocation lists.\ncrlnumber         = $dir/crlnumber\ncrl               = $dir/crl/intermediate.crl.pem\ncrl_extensions    = crl_ext\ndefault_crl_days  = 30\n\n# SHA-1 is deprecated, so use SHA-2 instead.\ndefault_md        = sha256\n\nname_opt          = ca_default\ncert_opt          = ca_default\ndefault_days      = 3750\npreserve          = no\npolicy            = policy_loose\n\n[ policy_strict ]\n# The root CA should only sign intermediate certificates that match.\n# See the POLICY FORMAT section of `man ca`.\ncountryName             = match\nstateOrProvinceName     = match\norganizationName        = match\norganizationalUnitName  = optional\ncommonName              = supplied\nemailAddress            = optional\n\n[ policy_loose ]\n# Allow the intermediate CA to sign a more diverse range of certificates.\n# See the POLICY FORMAT section of the `ca` man page.\ncountryName             = optional\nstateOrProvinceName     = optional\nlocalityName            = optional\norganizationName        = optional\norganizationalUnitName  = optional\ncommonName              = supplied\nemailAddress            = optional\n\n[ req ]\n# Options for the `req` tool (`man req`).\ndefault_bits        = 2048\ndistinguished_name  = req_distinguished_name\nstring_mask         = utf8only\n\n# SHA-1 is deprecated, so use SHA-2 instead.\ndefault_md          = sha256\n\n# Extension to add when the -x509 option is used.\nx509_extensions     = v3_ca\n\n[ req_distinguished_name ]\n# See &lt;https://en.wikipedia.org/wiki/Certificate_signing_request&gt;.\ncountryName                     = Country Name (2 letter code)\nstateOrProvinceName             = State or Province Name\nlocalityName                    = Locality Name\norganizationName                = Organization Name\norganizationalUnitName          = Organizational Unit Name\ncommonName                      = Common Name\nemailAddress                    = Email Address\n\n# Optionally, specify some defaults.\ncountryName_default             = US\nstateOrProvinceName_default     = Connecticut\nlocalityName_default            = East Hartford\norganizationName_default        = Pratt &amp; Whitney\norganizationalUnitName_default  = Collateral\nemailAddress_default            = collateral.intermediate@support.com\n\n[ v3_ca ]\n# Extensions for a typical CA (`man x509v3_config`).\nsubjectKeyIdentifier   = hash\nauthorityKeyIdentifier = keyid:always,issuer\nbasicConstraints       = critical, CA:true\nkeyUsage               = critical, digitalSignature, cRLSign, keyCertSign\n\n[ v3_intermediate_ca ]\n# Extensions for a typical intermediate CA (`man x509v3_config`).\nsubjectKeyIdentifier   = hash\nauthorityKeyIdentifier = keyid:always,issuer\nbasicConstraints       = critical, CA:true, pathlen:0\nkeyUsage               = critical, digitalSignature, cRLSign, keyCertSign\n\n[ usr_cert ]\n# Extensions for client certificates (`man x509v3_config`).\nbasicConstraints       = CA:FALSE\nnsCertType             = client, email\nnsComment              = \"OpenSSL Generated Client Certificate\"\nsubjectKeyIdentifier   = hash\nauthorityKeyIdentifier = keyid,issuer\nkeyUsage               = critical, nonRepudiation, digitalSignature, keyEncipherment\nextendedKeyUsage       = clientAuth, emailProtection\n\n[ server_cert ]\n# Extensions for server certificates (`man x509v3_config`).\nbasicConstraints       = CA:FALSE\nnsCertType             = server\nnsComment              = \"OpenSSL Generated Server Certificate\"\nsubjectKeyIdentifier   = hash\nauthorityKeyIdentifier = keyid,issuer:always\nkeyUsage               = critical, digitalSignature, keyEncipherment\nextendedKeyUsage       = serverAuth\n\n[ crl_ext ]\n# Extension for CRLs (`man x509v3_config`).\nauthorityKeyIdentifier=keyid:always\n\n[ ocsp ]\n# Extension for OCSP signing certificates (`man ocsp`).\nbasicConstraints       = CA:FALSE\nsubjectKeyIdentifier   = hash\nauthorityKeyIdentifier = keyid,issuer\nkeyUsage               = critical, digitalSignature\nextendedKeyUsage       = critical, OCSPSigning\n</code></pre>"},{"location":"appendix/root-configuration/","title":"Root CA Configuration File","text":"<p>View this file as plain text.</p> <pre><code># OpenSSL root CA configuration file.\n# Copy to `/root/ca/openssl.cnf`.\n\n[ ca ]\n# `man ca`\ndefault_ca = CA_default\n\n[ CA_default ]\n# Directory and file locations.\ndir               = /root/ca\ncerts             = $dir/certs\ncrl_dir           = $dir/crl\nnew_certs_dir     = $dir/newcerts\ndatabase          = $dir/index.txt\nserial            = $dir/serial\nRANDFILE          = $dir/private/.rand\n\n# The root key and root certificate.\nprivate_key       = $dir/private/ca.key.pem\ncertificate       = $dir/certs/ca.cert.pem\n\n# For certificate revocation lists.\ncrlnumber         = $dir/crlnumber\ncrl               = $dir/crl/ca.crl.pem\ncrl_extensions    = crl_ext\ndefault_crl_days  = 30\n\n# SHA-1 is deprecated, so use SHA-2 instead.\ndefault_md        = sha256\n\nname_opt          = ca_default\ncert_opt          = ca_default\ndefault_days      = 3750\npreserve          = no\npolicy            = policy_strict\n\n[ policy_strict ]\n# The root CA should only sign intermediate certificates that match.\n# See the POLICY FORMAT section of `man ca`.\ncountryName             = match\nstateOrProvinceName     = match\norganizationName        = match\norganizationalUnitName  = optional\ncommonName              = supplied\nemailAddress            = optional\n\n[ policy_loose ]\n# Allow the intermediate CA to sign a more diverse range of certificates.\n# See the POLICY FORMAT section of the `ca` man page.\ncountryName             = optional\nstateOrProvinceName     = optional\nlocalityName            = optional\norganizationName        = optional\norganizationalUnitName  = optional\ncommonName              = supplied\nemailAddress            = optional\n\n[ req ]\n# Options for the `req` tool (`man req`).\ndefault_bits        = 2048\ndistinguished_name  = req_distinguished_name\nstring_mask         = utf8only\n\n# SHA-1 is deprecated, so use SHA-2 instead.\ndefault_md          = sha256\n\n# Extension to add when the -x509 option is used.\nx509_extensions     = v3_ca\n\n[ req_distinguished_name ]\n# See &lt;https://en.wikipedia.org/wiki/Certificate_signing_request&gt;.\ncountryName                     = Country Name (2 letter code)\nstateOrProvinceName             = State or Province Name\nlocalityName                    = Locality Name\norganizationName                = Organization Name\norganizationalUnitName          = Organizational Unit Name\ncommonName                      = Common Name\nemailAddress                    = Email Address\n\n# Optionally, specify some defaults.\ncountryName_default             = US\nstateOrProvinceName_default     = Connecticut\nlocalityName_default            = East Hartford\norganizationName_default        = Alice Ltd\norganizationalUnitName_default  = Collateral\nemailAddress_default            = collateral.ca@support.com\n\n[ v3_ca ]\n# Extensions for a typical CA (`man x509v3_config`).\nsubjectKeyIdentifier   = hash\nauthorityKeyIdentifier = keyid:always,issuer\nbasicConstraints       = critical, CA:true\nkeyUsage               = critical, digitalSignature, cRLSign, keyCertSign\n\n[ v3_intermediate_ca ]\n# Extensions for a typical intermediate CA (`man x509v3_config`).\nsubjectKeyIdentifier   = hash\nauthorityKeyIdentifier = keyid:always,issuer\nbasicConstraints       = critical, CA:true, pathlen:0\nkeyUsage               = critical, digitalSignature, cRLSign, keyCertSign\n\n[ usr_cert ]\n# Extensions for client certificates (`man x509v3_config`).\nbasicConstraints       = CA:FALSE\nnsCertType             = client, email\nnsComment              = \"OpenSSL Generated Client Certificate\"\nsubjectKeyIdentifier   = hash\nauthorityKeyIdentifier = keyid,issuer\nkeyUsage               = critical, nonRepudiation, digitalSignature, keyEncipherment\nextendedKeyUsage       = clientAuth, emailProtection\n\n[ server_cert ]\n# Extensions for server certificates (`man x509v3_config`).\nbasicConstraints       = CA:FALSE\nnsCertType             = server\nnsComment              = \"OpenSSL Generated Server Certificate\"\nsubjectKeyIdentifier   = hash\nauthorityKeyIdentifier = keyid,issuer:always\nkeyUsage               = critical, digitalSignature, keyEncipherment\nextendedKeyUsage       = serverAuth\n\n[ crl_ext ]\n# Extension for CRLs (`man x509v3_config`).\nauthorityKeyIdentifier = keyid:always\n\n[ ocsp ]\n# Extension for OCSP signing certificates (`man ocsp`).\nbasicConstraints       = CA:FALSE\nsubjectKeyIdentifier   = hash\nauthorityKeyIdentifier = keyid,issuer\nkeyUsage               = critical, digitalSignature\nextendedKeyUsage       = critical, OCSPSigning\n</code></pre>"},{"location":"guides/","title":"OpenSSL Certificate Authority","text":"<p>This guide demonstrates how to act as your own certificate authority (CA) using the OpenSSL command-line tools.  This is useful in a number of situations, such as issuing server certificates to secure an intranet website,  or for issuing certificates to clients to allow them to authenticate to a server.</p> <ul> <li>Introduction</li> <li>Create the root pair<ul> <li>Prepare the directory </li> <li>Prepare the configuration file </li> <li>Create the root key </li> <li>Create the root certificate </li> <li>Verify the root certificate </li> </ul> </li> <li>Create the intermediate pair <ul> <li>Prepare the directory </li> <li>Create the intermediate key </li> <li>Create the intermediate certificate </li> <li>Verify the intermediate certificate </li> <li>Create the certificate chain file </li> </ul> </li> <li>Sign server and client certificates <ul> <li>Create a key </li> <li>Create a certificate </li> <li>Verify the certificate </li> <li>Deploy the certificate </li> </ul> </li> <li>Certificate revocation lists <ul> <li>Prepare the configuration file </li> <li>Create the CRL </li> <li>Revoke a certificate </li> <li>Server-side use of the CRL </li> <li>Client-side use of the CRL </li> </ul> </li> <li>Online Certificate Status Protocol <ul> <li>Prepare the configuration file </li> <li>Create the OCSP pair </li> <li>Revoke a certificate </li> </ul> </li> <li>Appendix <ul> <li>Root CA configuration file </li> <li>Intermediate CA configuration file </li> </ul> </li> </ul>"},{"location":"guides/certificate-revocation-lists/","title":"Certificate Revocation Lists","text":"<p>A certificate revocation list (CRL) provides a list of certificates that have been revoked.  A client application, such as a web browser, can use a CRL to check a server\u2019s authenticity.  A server application, such as Apache or OpenVPN, can use a CRL to deny access to clients that are no longer trusted.</p> <p>Publish the CRL at a publicly accessible location (eg, <code>http://example.com/intermediate.crl.pem</code>).  Third-parties can fetch the CRL from this location to check whether any certificates they rely on have been revoked.</p> <p>Note</p> <p>Some applications vendors have deprecated CRLs and are instead using the Online Certificate Status Protocol (OCSP).</p>"},{"location":"guides/certificate-revocation-lists/#prepare-the-configuration-file","title":"Prepare the configuration file","text":"<p>When a certificate authority signs a certificate, it will normally encode the CRL location into the certificate.  Add crlDistributionPoints to the appropriate sections. In our case, add it to the [ server_cert ] section.</p> <pre><code>[ server_cert ]\n# ... snipped ...\ncrlDistributionPoints = URI:http://example.com/intermediate.crl.pem\n</code></pre>"},{"location":"guides/certificate-revocation-lists/#create-the-crl","title":"Create the CRL","text":"<pre><code>cd /root/ca\nopenssl ca -config intermediate/openssl.cnf \\\n      -gencrl -out intermediate/crl/intermediate.crl.pem\n</code></pre> <p>Note</p> <p>The <code>CRL OPTIONS</code> section of the ca man page contains more information on how to create CRLs.</p> <p>You can check the contents of the CRL with the crl tool.</p> <p><pre><code># openssl crl -in intermediate/crl/intermediate.crl.pem -noout -text\n</code></pre> No certificates have been revoked yet, so the output will state No Revoked Certificates.</p> <p>You should re-create the CRL at regular intervals. By default, the CRL expires after 30 days.  This is controlled by the <code>default_crl_days</code> option in the <code>[ CA_default ]</code> section.</p>"},{"location":"guides/certificate-revocation-lists/#revoke-a-certificate","title":"Revoke a certificate","text":"<p>Let\u2019s walk through an example. Alice is running the Apache web server and has a private folder of  heart-meltingly cute kitten pictures. Alice wants to grant her friend, Bob, access to this collection.</p> <p>Bob creates a private key and certificate signing request (CSR).</p> <pre><code>cd /home/bob\nopenssl genrsa -out bob@example.com.key.pem 2048\nopenssl req -new -key bob@example.com.key.pem -out bob@example.com.csr.pem\n</code></pre> <p>You are about to be asked to enter information that will be incorporated into your certificate request. <pre><code>-----\nCountry Name [XX]:US\nState or Province Name []:California\nLocality Name []:San Francisco\nOrganization Name []:Bob Ltd\nOrganizational Unit Name []:\nCommon Name []:bob@example.com\nEmail Address []:\n</code></pre></p> <p>Bob sends his CSR to Alice, who then signs it.</p> <pre><code>cd /root/ca\nopenssl ca -config intermediate/openssl.cnf \\\n      -extensions usr_cert -notext -md sha256 \\\n      -in intermediate/csr/bob@example.com.csr.pem \\\n      -out intermediate/certs/bob@example.com.cert.pem\n</code></pre> <pre><code>Sign the certificate? [y/n]: y\n1 out of 1 certificate requests certified, commit? [y/n]: y\n</code></pre> <p>Alice verifies that the certificate is valid: <pre><code>openssl verify -CAfile intermediate/certs/ca-chain.cert.pem \\\n      intermediate/certs/bob@example.com.cert.pem\n</code></pre></p> <p>Output: <pre><code>bob@example.com.cert.pem: OK\n</code></pre></p> <p>The <code>index.txt</code> file should contain a new entry. <pre><code>V 160420124740Z 1001 unknown ... /CN=bob@example.com\n</code></pre></p> <p>Alice sends Bob the signed certificate. Bob installs the certificate in his web browser and is  now able to access Alice\u2019s kitten pictures. Hurray!</p> <p>Sadly, it turns out that Bob is misbehaving. Bob has posted Alice\u2019s kitten pictures to Hacker News, claiming that  they\u2019re his own and gaining huge popularity. Alice finds out and needs to revoke his access immediately.</p> <pre><code>cd /root/ca\nopenssl ca -config intermediate/openssl.cnf \\\n      -revoke intermediate/certs/bob@example.com.cert.pem\n</code></pre> <p>Output: <pre><code>Enter pass phrase for intermediate.key.pem: secretpassword\nRevoking Certificate 1001.\n</code></pre></p>"},{"location":"guides/certificate-revocation-lists/#data-base-updated","title":"Data Base Updated","text":"<p>The line in <code>index.txt</code> that corresponds to Bob\u2019s certificate now begins with the character R.  This means the certificate has been revoked.</p> <pre><code>R 160420124740Z 150411125310Z 1001 unknown ... /CN=bob@example.com\n</code></pre> <p>After revoking Bob\u2019s certificate, Alice must re-create the CRL.</p>"},{"location":"guides/certificate-revocation-lists/#server-side-use-of-the-crl","title":"Server-side use of the CRL","text":"<p>For client certificates, it\u2019s typically a server-side application (eg, Apache) that is doing the verification.  This application needs to have local access to the CRL.</p> <p>In Alice\u2019s case, she can add the <code>SSLCARevocationPath</code> directive to her Apache configuration and copy the CRL to her web server.  The next time that Bob connects to the web server, Apache will check his client certificate against the CRL and deny access.</p> <p>Similarly, OpenVPN has a crl-verify directive so that it can block clients that have had their certificates revoked.</p>"},{"location":"guides/certificate-revocation-lists/#client-side-use-of-the-crl","title":"Client-side use of the CRL","text":"<p>For server certificates, it\u2019s typically a client-side application (eg, a web browser) that performs the verification.  This application must have remote access to the CRL.</p> <p>If a certificate was signed with an extension that includes crlDistributionPoints, a client-side application can  read this information and fetch the CRL from the specified location.</p> <p>The CRL distribution points are visible in the certificate X509v3 details.</p> <pre><code>openssl x509 -in cute-kitten-pictures.example.com.cert.pem -noout -text\n</code></pre> <p>Output: <pre><code>X509v3 CRL Distribution Points:\n\n    Full Name:\n        URI:http://example.com/intermediate.crl.pem\n</code></pre></p>"},{"location":"guides/create-the-intermediate-pair/","title":"Create The Intermediate Pair","text":"<p>An intermediate certificate authority (CA) is an entity that can sign certificates on behalf of the root CA.  The root CA signs the intermediate certificate, forming a chain of trust.</p> <p>The purpose of using an intermediate CA is primarily for security.  The root key can be kept offline and used as infrequently as possible.  If the intermediate key is compromised, the root CA can revoke the intermediate certificate and create a new intermediate cryptographic pair.</p>"},{"location":"guides/create-the-intermediate-pair/#prepare-the-directory","title":"Prepare the directory","text":"<p>The root CA files are kept in /root/ca. Choose a different directory (<code>/root/ca/intermediate</code>) to store the intermediate CA files.</p> <pre><code>mkdir /root/ca/intermediate\n</code></pre> <p>Create the same directory structure used for the root CA files.  It\u2019s convenient to also create a csr directory to hold certificate signing requests. <pre><code>cd /root/ca/intermediate\nmkdir certs crl csr newcerts private\nchmod 700 private\ntouch index.txt\necho 1000 &gt; serial\n</code></pre></p> <p>Add a <code>crlnumber</code> file to the intermediate CA directory tree. <code>crlnumber</code> is used to keep track of certificate revocation lists. <pre><code>echo 1000 &gt; /root/ca/intermediate/crlnumber\n</code></pre></p> <p>Copy the intermediate CA configuration file from the Appendix to <code>/root/ca/intermediate/openssl.cnf</code>.  Five options have been changed compared to the root CA configuration file: <pre><code>[ CA_default ]\ndir             = /root/ca/intermediate\nprivate_key     = $dir/private/intermediate.key.pem\ncertificate     = $dir/certs/intermediate.cert.pem\ncrl             = $dir/crl/intermediate.crl.pem\npolicy          = policy_loose\n</code></pre></p>"},{"location":"guides/create-the-intermediate-pair/#create-the-intermediate-key","title":"Create the intermediate key","text":"<p>Create the intermediate key (<code>intermediate.key.pem</code>).  Encrypt the intermediate key with AES 256-bit encryption and a strong password.</p> <pre><code>cd /root/ca\nopenssl genrsa -aes256 -out intermediate/private/intermediate.key.pem 4096\n</code></pre> <p>Enter pass phrase for intermediate.key.pem: secretpassword Verifying - Enter pass phrase for intermediate.key.pem: secretpassword <pre><code>chmod 400 intermediate/private/intermediate.key.pem\n</code></pre></p>"},{"location":"guides/create-the-intermediate-pair/#create-the-intermediate-certificate","title":"Create the intermediate certificate","text":"<p>Use the intermediate key to create a certificate signing request (CSR).  The details should generally match the root CA. The Common Name, however, must be different.</p> <p>Warning</p> <p>Make sure you specify the intermediate CA configuration file (intermediate/openssl.cnf).</p> <p><pre><code>cd /root/ca\nopenssl req -config intermediate/openssl.cnf -new \\\n      -sha256 \\\n      -key intermediate/private/intermediate.key.pem \\\n      -out intermediate/csr/intermediate.csr.pem\n</code></pre> Enter pass phrase for intermediate.key.pem: secretpassword</p> <p>You are about to be asked to enter information that will be incorporated into your certificate request. <pre><code>-----\nCountry Name (2 letter code) [XX]:GB\nState or Province Name []:England\nLocality Name []:\nOrganization Name []:Alice Ltd\nOrganizational Unit Name []:Alice Ltd Certificate Authority\nCommon Name []:Alice Ltd Intermediate CA\nEmail Address []:\n</code></pre></p> <p>To create an intermediate certificate, use the root CA with the v3_intermediate_ca extension to sign the intermediate CSR. The intermediate certificate should be valid for a shorter period than the root certificate. Ten years would be reasonable.</p> <p>Warning</p> <p>This time, specify the root CA configuration file (/root/ca/openssl.cnf).</p> <pre><code>cd /root/ca\nopenssl ca -config openssl.cnf -extensions v3_intermediate_ca \\\n      -days 3650 -notext -md sha256 \\\n      -in intermediate/csr/intermediate.csr.pem \\\n      -out intermediate/certs/intermediate.cert.pem\n</code></pre> <p>Enter pass phrase for ca.key.pem: secretpassword Sign the certificate? [y/n]: y</p> <pre><code>chmod 444 intermediate/certs/intermediate.cert.pem\n</code></pre> <p>The index.txt file is where the OpenSSL ca tool stores the certificate database.  Do not delete or edit this file by hand. It should now contain a line that refers to the intermediate certificate. <pre><code>V 250408122707Z 1000 unknown ... /CN=Alice Ltd Intermediate CA\n</code></pre></p>"},{"location":"guides/create-the-intermediate-pair/#verify-the-intermediate-certificate","title":"Verify the intermediate certificate","text":"<p>As we did for the root certificate, check that the details of the intermediate certificate are correct.</p> <pre><code>openssl x509 -noout -text  -in intermediate/certs/intermediate.cert.pem\n</code></pre> <p>Verify the intermediate certificate against the root certificate. An OK indicates that the chain of trust is intact. <pre><code># openssl verify -CAfile certs/ca.cert.pem intermediate/certs/intermediate.cert.pem\n</code></pre> Output: <pre><code>intermediate.cert.pem: OK\n</code></pre></p>"},{"location":"guides/create-the-intermediate-pair/#create-the-certificate-chain-file","title":"Create the certificate chain file","text":"<p>When an application (eg, a web browser) tries to verify a certificate signed by the intermediate CA, it must also verify the intermediate certificate against the root certificate.  To complete the chain of trust, create a CA certificate chain to present to the application.</p> <p>To create the CA certificate chain, concatenate the intermediate and root certificates together. We will use this file later to verify certificates signed by the intermediate CA.</p> <p><pre><code>cat intermediate/certs/intermediate.cert.pem certs/ca.cert.pem &gt; \\\n    intermediate/certs/ca-chain.cert.pem\n</code></pre> <pre><code>chmod 444 intermediate/certs/ca-chain.cert.pem\n</code></pre></p> <p>Note</p> <p>Our certificate chain file must include the root certificate because no client application knows about it yet.  A better option, particularly if you\u2019re administrating an intranet, is to install your root certificate on  every client that needs to connect. In that case, the chain file need only contain your intermediate certificate.</p>"},{"location":"guides/create-the-root-pair/","title":"Create the Root Pair","text":"<p>Acting as a certificate authority (CA) means dealing with cryptographic pairs of private keys and public certificates. The very first cryptographic pair we\u2019ll create is the root pair.  This consists of the root key (<code>ca.key.pem</code>) and root certificate (<code>ca.cert.pem</code>). This pair forms the identity of your CA.</p> <p>Typically, the root CA does not sign server or client certificates directly.  The root CA is only ever used to create one or more intermediate CAs, which are trusted by the root CA to sign certificates on their behalf. This is best practice. It allows the root key to be kept offline and unused as much as possible, as any compromise of the root key is disastrous.</p> <p>Note</p> <p>It\u2019s best practice to create the root pair in a secure environment. Ideally, this should be on a fully encrypted, air gapped computer that is permanently isolated from the Internet. Remove the wireless card and fill the ethernet port with glue.</p>"},{"location":"guides/create-the-root-pair/#prepare-the-directory","title":"Prepare the directory","text":"<p>Choose a directory (/root/ca) to store all keys and certificates.</p> <pre><code>mkdir /root/ca\n</code></pre> <p>Create the directory structure. The index.txt and serial files act as a flat file database to keep track of signed certificates. <pre><code>cd /root/ca\nmkdir certs crl newcerts private\nchmod 700 private\ntouch index.txt\necho 1000 &gt; serial\n</code></pre></p>"},{"location":"guides/create-the-root-pair/#prepare-the-configuration-file","title":"Prepare the configuration file","text":"<p>You must create a configuration file for OpenSSL to use.  Copy the root CA configuration file from the Appendix to <code>/root/ca/openssl.cnf</code>.</p> <p>The <code>[ ca ]</code> section is mandatory. Here we tell OpenSSL to use the options from the <code>[ CA_default ]</code> section.</p> <pre><code>[ ca ]\n# `man ca`\ndefault_ca = CA_default\n</code></pre> <p>The <code>[ CA_default ]</code> section contains a range of defaults. Make sure you declare the directory you chose earlier (<code>/root/ca</code>). <pre><code>[ CA_default ]\n# Directory and file locations.\ndir               = /root/ca\ncerts             = $dir/certs\ncrl_dir           = $dir/crl\nnew_certs_dir     = $dir/newcerts\ndatabase          = $dir/index.txt\nserial            = $dir/serial\nRANDFILE          = $dir/private/.rand\n\n# The root key and root certificate.\nprivate_key       = $dir/private/ca.key.pem\ncertificate       = $dir/certs/ca.cert.pem\n\n# For certificate revocation lists.\ncrlnumber         = $dir/crlnumber\ncrl               = $dir/crl/ca.crl.pem\ncrl_extensions    = crl_ext\ndefault_crl_days  = 30\n\n# SHA-1 is deprecated, so use SHA-2 instead.\ndefault_md        = sha256\n\nname_opt          = ca_default\ncert_opt          = ca_default\ndefault_days      = 375\npreserve          = no\npolicy            = policy_strict\n</code></pre></p> <p>We\u2019ll apply policy_strict for all root CA signatures, as the root CA is only being used to create intermediate CAs. <pre><code>[ policy_strict ]\n# The root CA should only sign intermediate certificates that match.\n# See the POLICY FORMAT section of `man ca`.\ncountryName             = match\nstateOrProvinceName     = match\norganizationName        = match\norganizationalUnitName  = optional\ncommonName              = supplied\nemailAddress            = optional\n</code></pre></p> <p>We\u2019ll apply policy_loose for all intermediate CA signatures, as the intermediate CA is signing server and client certificates that may come from a variety of third-parties. <pre><code>[ policy_loose ]\n# Allow the intermediate CA to sign a more diverse range of certificates.\n# See the POLICY FORMAT section of the `ca` man page.\ncountryName             = optional\nstateOrProvinceName     = optional\nlocalityName            = optional\norganizationName        = optional\norganizationalUnitName  = optional\ncommonName              = supplied\nemailAddress            = optional\n</code></pre></p> <p>Options from the [ req ] section are applied when creating certificates or certificate signing requests. <pre><code>[ req ]\n# Options for the `req` tool (`man req`).\ndefault_bits        = 2048\ndistinguished_name  = req_distinguished_name\nstring_mask         = utf8only\n\n# SHA-1 is deprecated, so use SHA-2 instead.\ndefault_md          = sha256\n\n# Extension to add when the -x509 option is used.\nx509_extensions     = v3_ca\n</code></pre></p> <p>The [ req_distinguished_name ] section declares the information normally required in a certificate signing request. You can optionally specify some defaults.</p> <pre><code>[ req_distinguished_name ]\n# See &lt;https://en.wikipedia.org/wiki/Certificate_signing_request&gt;.\ncountryName                     = Country Name (2 letter code)\nstateOrProvinceName             = State or Province Name\nlocalityName                    = Locality Name\norganizationName                = Organization Name\norganizationalUnitName          = Organizational Unit Name\ncommonName                      = Common Name\nemailAddress                    = Email Address\n\n# Optionally, specify some defaults.\ncountryName_default             = US\nstateOrProvinceName_default     = Connecticut\nlocalityName_default            = East Hartford\norganizationName_default        = Pratt &amp; Whitney\norganizationalUnitName_default  =\n#emailAddress_default           =\n</code></pre> <p>The next few sections are extensions that can be applied when signing certificates. For example, passing the -extensions v3_ca command-line argument will apply the options set in [ v3_ca ].</p> <p>We\u2019ll apply the v3_ca extension when we create the root certificate. <pre><code>[ v3_ca ]\n# Extensions for a typical CA (`man x509v3_config`).\nsubjectKeyIdentifier   = hash\nauthorityKeyIdentifier = keyid:always,issuer\nbasicConstraints       = critical, CA:true\nkeyUsage               = critical, digitalSignature, cRLSign, keyCertSign\n</code></pre></p> <p>We\u2019ll apply the v3_ca_intermediate extension when we create the intermediate certificate. pathlen:0 ensures that there can be no further certificate authorities below the intermediate CA. <pre><code>[ v3_intermediate_ca ]\n# Extensions for a typical intermediate CA (`man x509v3_config`).\nsubjectKeyIdentifier   = hash\nauthorityKeyIdentifier = keyid:always,issuer\nbasicConstraints       = critical, CA:true, pathlen:0\nkeyUsage               = critical, digitalSignature, cRLSign, keyCertSign\n</code></pre></p> <p>We\u2019ll apply the usr_cert extension when signing client certificates, such as those used for remote user authentication. <pre><code>[ usr_cert ]\n# Extensions for client certificates (`man x509v3_config`).\nbasicConstraints       = CA:FALSE\nnsCertType             = client, email\nnsComment              = \"OpenSSL Generated Client Certificate\"\nsubjectKeyIdentifier   = hash\nauthorityKeyIdentifier = keyid,issuer\nkeyUsage               = critical, nonRepudiation, digitalSignature, keyEncipherment\nextendedKeyUsage       = clientAuth, emailProtection\n</code></pre></p> <p>We\u2019ll apply the server_cert extension when signing server certificates, such as those used for web servers. <pre><code>[ server_cert ]\n# Extensions for server certificates (`man x509v3_config`).\nbasicConstraints       = CA:FALSE\nnsCertType             = server\nnsComment              = \"OpenSSL Generated Server Certificate\"\nsubjectKeyIdentifier   = hash\nauthorityKeyIdentifier = keyid,issuer:always\nkeyUsage               = critical, digitalSignature, keyEncipherment\nextendedKeyUsage       = serverAuth\n</code></pre></p> <p>The crl_ext extension is automatically applied when creating certificate revocation lists. <pre><code>[ crl_ext ]\n# Extension for CRLs (`man x509v3_config`).\nauthorityKeyIdentifier=keyid:always\n</code></pre></p> <p>We\u2019ll apply the ocsp extension when signing the Online Certificate Status Protocol (OCSP) certificate. <pre><code>[ ocsp ]\n# Extension for OCSP signing certificates (`man ocsp`).\nbasicConstraints       = CA:FALSE\nsubjectKeyIdentifier   = hash\nauthorityKeyIdentifier = keyid,issuer\nkeyUsage               = critical, digitalSignature\nextendedKeyUsage       = critical, OCSPSigning\n</code></pre></p>"},{"location":"guides/create-the-root-pair/#create-the-root-key","title":"Create the root key","text":"<p>Create the root key (ca.key.pem) and keep it absolutely secure. Anyone in possession of the root key can issue trusted certificates. Encrypt the root key with AES 256-bit encryption and a strong password.</p> <p>Note</p> <p>Use 4096 bits for all root and intermediate certificate authority keys. You\u2019ll still be able to sign server and client certificates of a shorter length.</p> <pre><code>cd /root/ca\nopenssl genrsa -aes256 -out private/ca.key.pem 4096\n</code></pre> <p>Enter pass phrase for ca.key.pem: secretpassword Verifying - Enter pass phrase for ca.key.pem: secretpassword</p> <pre><code>chmod 400 private/ca.key.pem\n</code></pre>"},{"location":"guides/create-the-root-pair/#create-the-root-certificate","title":"Create the root certificate","text":"<p>Use the root key (ca.key.pem) to create a root certificate (ca.cert.pem). Give the root certificate a long expiry date, such as twenty years. Once the root certificate expires, all certificates signed by the CA become invalid.</p> <p>Warning</p> <p>Whenever you use the req tool, you must specify a configuration file to use with the -config option, otherwise OpenSSL will default to /etc/pki/tls/openssl.cnf.</p> <p><pre><code>cd /root/ca\nopenssl req -config openssl.cnf \\\n      -key private/ca.key.pem \\\n      -new -x509 -days 7300 -sha256 -extensions v3_ca \\\n      -out certs/ca.cert.pem\n</code></pre> Enter pass phrase for ca.key.pem: <code>secretpassword</code> You are about to be asked to enter information that will be incorporated into your certificate request.</p> <pre><code>-----\nCountry Name (2 letter code) [XX]:GB\nState or Province Name []:England\nLocality Name []:\nOrganization Name []:Alice Ltd\nOrganizational Unit Name []:Alice Ltd Certificate Authority\nCommon Name []:Alice Ltd Root CA\nEmail Address []:\n-----\n</code></pre> <pre><code>chmod 444 certs/ca.cert.pem\n</code></pre>"},{"location":"guides/create-the-root-pair/#verify-the-root-certificate","title":"Verify the root certificate","text":"<pre><code>openssl x509 -noout -text -in certs/ca.cert.pem\n</code></pre> <p>The output shows:</p> <ul> <li>the Signature Algorithm used</li> <li>the dates of certificate Validity</li> <li>the Public-Key bit length</li> <li>the Issuer, which is the entity that signed the certificate     the Subject, which refers to the certificate itself</li> </ul> <p>The <code>Issuer</code> and <code>Subject</code> are identical as the certificate is self-signed. Note that all root certificates are self-signed. <pre><code>Signature Algorithm: sha256WithRSAEncryption\n    Issuer: C=GB, ST=England,\n            O=Alice Ltd, OU=Alice Ltd Certificate Authority,\n            CN=Alice Ltd Root CA\n    Validity\n        Not Before: Apr 11 12:22:58 2015 GMT\n        Not After : Apr  6 12:22:58 2035 GMT\n    Subject: C=GB, ST=England,\n             O=Alice Ltd, OU=Alice Ltd Certificate Authority,\n             CN=Alice Ltd Root CA\n    Subject Public Key Info:\n        Public Key Algorithm: rsaEncryption\n            Public-Key: (4096 bit)\n</code></pre></p> <p>The output also shows the X509v3 extensions. We applied the <code>v3_ca</code> extension, so the options from <code>[ v3_ca ]</code> should be reflected in the output. <pre><code>X509v3 extensions:\n    X509v3 Subject Key Identifier:\n        38:58:29:2F:6B:57:79:4F:39:FD:32:35:60:74:92:60:6E:E8:2A:31\n    X509v3 Authority Key Identifier:\n        keyid:38:58:29:2F:6B:57:79:4F:39:FD:32:35:60:74:92:60:6E:E8:2A:31\n\n    X509v3 Basic Constraints: critical\n        CA:TRUE\n    X509v3 Key Usage: critical\n        Digital Signature, Certificate Sign, CRL Sign\n</code></pre> Version 1.0.4 \u2014 Last updated on 2015-12-09.</p> <p>\u00a9 Copyright 2013-2015, Jamie Nguyen. Created with Sphinx using a custom-built theme.</p>"},{"location":"guides/online-certificate-status-protocol/","title":"Online Certificate Status Protocol","text":"<p>The Online Certificate Status Protocol (OCSP) was created as an alternative to  certificate revocation lists (CRLs).  Similar to CRLs, OCSP enables a requesting party (eg, a web browser) to determine the revocation state of a certificate.</p> <p>When a CA signs a certificate, they will typically include an OCSP server address (eg, http://ocsp.example.com) in the  certificate. This is similar in function to crlDistributionPoints used for CRLs.</p> <p>As an example, when a web browser is presented with a server certificate, it will send a query to the OCSP server  address specified in the certificate. At this address, an OCSP responder listens to queries and responds  with the revocation status of the certificate.</p> <p>Note</p> <p>It\u2019s recommended to use OCSP instead where possible, though realistically you will tend to only need OCSP for website certificates. Some web browsers have deprecated or removed support for CRLs.</p>"},{"location":"guides/online-certificate-status-protocol/#prepare-the-configuration-file","title":"Prepare the configuration file","text":"<p>To use OCSP, the CA must encode the OCSP server location into the certificates that it signs.  Use the authorityInfoAccess option in the appropriate sections, which in our case means the <code>[ server_cert ]</code> section.</p> <pre><code>[ server_cert ]\n# ... snipped ...\nauthorityInfoAccess = OCSP;URI:http://ocsp.example.com\n</code></pre>"},{"location":"guides/online-certificate-status-protocol/#create-the-ocsp-pair","title":"Create the OCSP pair","text":"<p>The OCSP responder requires a cryptographic pair for signing the response that it sends to the requesting party.  The OCSP cryptographic pair must be signed by the same CA that signed the certificate being checked.</p> <p>Create a private key and encrypt it with AES-256 encryption.</p> <pre><code>cd /root/ca\nopenssl genrsa -aes256 -out intermediate/private/ocsp.example.com.key.pem 4096\n</code></pre> <p>Create a certificate signing request (CSR). The details should generally match those of the signing CA.  The Common Name, however, must be a fully qualified domain name.</p> <pre><code>cd /root/ca\nopenssl req -config intermediate/openssl.cnf -new -sha256 \\\n      -key intermediate/private/ocsp.example.com.key.pem \\\n      -out intermediate/csr/ocsp.example.com.csr.pem\n</code></pre> <pre><code>Enter pass phrase for intermediate.key.pem: secretpassword\nYou are about to be asked to enter information that will be incorporated into your certificate request.\n</code></pre> <pre><code>-----\nCountry Name (2 letter code) [XX]:GB\nState or Province Name []:England\nLocality Name []:\nOrganization Name []:Alice Ltd\nOrganizational Unit Name []:Alice Ltd Certificate Authority\nCommon Name []:ocsp.example.com\nEmail Address []:\n</code></pre>"},{"location":"guides/online-certificate-status-protocol/#sign-the-csr-with-the-intermediate-ca","title":"Sign the CSR with the intermediate CA.","text":"<pre><code>openssl ca -config intermediate/openssl.cnf -extensions ocsp -days 375 -notext -md sha256 \\\n      -in intermediate/csr/ocsp.example.com.csr.pem \\\n      -out intermediate/certs/ocsp.example.com.cert.pem\n</code></pre> <p>Verify that the certificate has the correct X509v3 extensions. <pre><code>openssl x509 -noout -text -in intermediate/certs/ocsp.example.com.cert.pem\n</code></pre></p> <pre><code>X509v3 Key Usage: critical\n    Digital Signature\nX509v3 Extended Key Usage: critical\n    OCSP Signing\n</code></pre>"},{"location":"guides/online-certificate-status-protocol/#revoke-a-certificate","title":"Revoke a certificate","text":"<p>The OpenSSL ocsp tool can act as an OCSP responder, but it\u2019s only intended for testing.  Production ready OCSP responders exist, but those are beyond the scope of this guide.</p> <p>Create a server certificate to test. <pre><code>cd /root/ca\nopenssl genrsa -out intermediate/private/test.example.com.key.pem 2048\n</code></pre> <pre><code>openssl req -config intermediate/openssl.cnf \\\n      -key intermediate/private/test.example.com.key.pem \\\n      -new -sha256 -out intermediate/csr/test.example.com.csr.pem\n</code></pre></p> <pre><code>openssl ca -config intermediate/openssl.cnf \\\n      -extensions server_cert -days 375 -notext -md sha256 \\\n      -in intermediate/csr/test.example.com.csr.pem \\\n      -out intermediate/certs/test.example.com.cert.pem\n</code></pre> <p>Run the OCSP responder on localhost. Rather than storing revocation status in a separate CRL file,  the OCSP responder reads index.txt directly. The response is signed with the OCSP cryptographic pair  (using the <code>-rkey</code> and <code>-rsigner</code> options).</p> <pre><code>openssl ocsp -port 127.0.0.1:2560 -text -sha256 \\\n      -index intermediate/index.txt \\\n      -CA intermediate/certs/ca-chain.cert.pem \\\n      -rkey intermediate/private/ocsp.example.com.key.pem \\\n      -rsigner intermediate/certs/ocsp.example.com.cert.pem \\\n      -nrequest 1\n</code></pre> <p>Enter pass phrase for ocsp.example.com.key.pem: secretpassword</p> <p>In another terminal, send a query to the OCSP responder. The -cert option specifies the certificate to query. <pre><code>openssl ocsp -CAfile intermediate/certs/ca-chain.cert.pem \\\n      -url http://127.0.0.1:2560 -resp_text \\\n      -issuer intermediate/certs/intermediate.cert.pem \\\n      -cert intermediate/certs/test.example.com.cert.pem\n</code></pre> The start of the output shows:</p> <ul> <li>whether a successful response was received (<code>OCSP Response Status</code>)</li> <li>the identity of the responder (<code>Responder Id</code>)</li> <li>the revocation status of the certificate (<code>Cert Status</code>)</li> </ul> <pre><code>OCSP Response Data:\n    OCSP Response Status: successful (0x0)\n    Response Type: Basic OCSP Response\n    Version: 1 (0x0)\n    Responder Id: ... CN = ocsp.example.com\n    Produced At: Apr 11 12:59:51 2015 GMT\n    Responses:\n    Certificate ID:\n      Hash Algorithm: sha1\n      Issuer Name Hash: E35979B6D0A973EBE8AEDED75D8C27D67D2A0334\n      Issuer Key Hash: 69E8EC547F252360E5B6E77261F1D4B921D445E9\n      Serial Number: 1003\n    Cert Status: good\n    This Update: Apr 11 12:59:51 2015 GMT\n</code></pre>"},{"location":"guides/online-certificate-status-protocol/#revoke-the-certificate","title":"Revoke the certificate.","text":"<p><pre><code>openssl ca -config intermediate/openssl.cnf -revoke intermediate/certs/test.example.com.cert.pem\n</code></pre> <pre><code>Enter pass phrase for intermediate.key.pem: secretpassword\nRevoking Certificate 1003.\nData Base Updated\n</code></pre></p> <p>As before, run the OCSP responder and on another terminal send a query.  This time, the output shows Cert Status: revoked and a Revocation Time. <pre><code>OCSP Response Data:\n    OCSP Response Status: successful (0x0)\n    Response Type: Basic OCSP Response\n    Version: 1 (0x0)\n    Responder Id: ... CN = ocsp.example.com\n    Produced At: Apr 11 13:03:00 2015 GMT\n    Responses:\n    Certificate ID:\n      Hash Algorithm: sha1\n      Issuer Name Hash: E35979B6D0A973EBE8AEDED75D8C27D67D2A0334\n      Issuer Key Hash: 69E8EC547F252360E5B6E77261F1D4B921D445E9\n      Serial Number: 1003\n    Cert Status: revoked\n    Revocation Time: Apr 11 13:01:09 2015 GMT\n    This Update: Apr 11 13:03:00 2015 GMT\n</code></pre></p>"},{"location":"guides/sign-server-and-client-certificate/","title":"Sign server and client certificates","text":"<p>We will be signing certificates using our intermediate CA.  You can use these signed certificates in a variety of situations, such as to secure connections  to a web server or to authenticate clients connecting to a service.</p> <p>Note</p> <p>The steps below are from your perspective as the certificate authority.  A third-party, however, can instead create their own private key and certificate  signing request (CSR) without revealing their private key to you.  They give you their CSR, and you give back a signed certificate.  In that scenario, skip the genrsa and req commands.</p>"},{"location":"guides/sign-server-and-client-certificate/#create-a-key","title":"Create a key","text":"<p>Our root and intermediate pairs are 4096 bits. Server and client certificates normally expire after one year, so we can safely use 2048 bits instead.</p> <p>Note</p> <p>Although 4096 bits is slightly more secure than 2048 bits, it slows down TLS handshakes and significantly  increases processor load during handshakes. For this reason, most websites use 2048-bit pairs.</p> <p>If you\u2019re creating a cryptographic pair for use with a web server (eg, Apache), you\u2019ll need to enter this password  every time you restart the web server. You may want to omit the -aes256 option to create a key without a password.</p> <pre><code>cd /root/ca\nopenssl genrsa -aes256 \\\n      -out intermediate/private/www.example.com.key.pem 2048\nchmod 400 intermediate/private/www.example.com.key.pem\n</code></pre>"},{"location":"guides/sign-server-and-client-certificate/#create-a-certificate","title":"Create a certificate","text":"<p>Use the private key to create a certificate signing request (CSR).  The CSR details don\u2019t need to match the intermediate CA.  For server certificates, the Common Name must be a fully qualified domain name (eg, www.example.com),  whereas for client certificates it can be any unique identifier (eg, an e-mail address). Note that the Common Name cannot be the same as either your root or intermediate certificate.</p> <pre><code>cd /root/ca\nopenssl req -config intermediate/openssl.cnf \\\n      -key intermediate/private/www.example.com.key.pem \\\n      -new -sha256 -out intermediate/csr/www.example.com.csr.pem\n</code></pre> <p>Enter pass phrase for www.example.com.key.pem: secretpassword You are about to be asked to enter information that will be incorporated into your certificate request. <pre><code>-----\nCountry Name (2 letter code) [XX]:US\nState or Province Name []:California\nLocality Name []:Mountain View\nOrganization Name []:Alice Ltd\nOrganizational Unit Name []:Alice Ltd Web Services\nCommon Name []:www.example.com\nEmail Address []:\n</code></pre></p> <p>To create a certificate, use the intermediate CA to sign the CSR.  If the certificate is going to be used on a server, use the server_cert extension.  If the certificate is going to be used for user authentication, use the usr_cert extension.  Certificates are usually given a validity of one year, though a CA will typically give a few days extra for convenience.</p> <pre><code>cd /root/ca\nopenssl ca -config intermediate/openssl.cnf \\\n      -extensions server_cert -days 375 -notext -md sha256 \\\n      -in intermediate/csr/www.example.com.csr.pem \\\n      -out intermediate/certs/www.example.com.cert.pem\n</code></pre> <pre><code>chmod 444 intermediate/certs/www.example.com.cert.pem\n</code></pre> <p>The intermediate/index.txt file should contain a line referring to this new certificate. <pre><code>V 160420124233Z 1000 unknown ... /CN=www.example.com\n</code></pre></p>"},{"location":"guides/sign-server-and-client-certificate/#verify-the-certificate","title":"Verify the certificate","text":"<pre><code>openssl x509 -noout -text -in intermediate/certs/www.example.com.cert.pem\n</code></pre> <p>The Issuer is the intermediate CA. The Subject refers to the certificate itself. <pre><code>Signature Algorithm: sha256WithRSAEncryption\n    Issuer: C=GB, ST=England,\n            O=Alice Ltd, OU=Alice Ltd Certificate Authority,\n            CN=Alice Ltd Intermediate CA\n    Validity\n        Not Before: Apr 11 12:42:33 2015 GMT\n        Not After : Apr 20 12:42:33 2016 GMT\n    Subject: C=US, ST=California, L=Mountain View,\n             O=Alice Ltd, OU=Alice Ltd Web Services,\n             CN=www.example.com\n    Subject Public Key Info:\n        Public Key Algorithm: rsaEncryption\n            Public-Key: (2048 bit)\n</code></pre></p> <p>The output will also show the X509v3 extensions. When creating the certificate, you used either the server_cert or usr_cert extension.  The options from the corresponding configuration section will be reflected in the output.</p> <pre><code>X509v3 extensions:\n    X509v3 Basic Constraints:\n        CA:FALSE\n    Netscape Cert Type:\n        SSL Server\n    Netscape Comment:\n        OpenSSL Generated Server Certificate\n    X509v3 Subject Key Identifier:\n        B1:B8:88:48:64:B7:45:52:21:CC:35:37:9E:24:50:EE:AD:58:02:B5\n    X509v3 Authority Key Identifier:\n        keyid:69:E8:EC:54:7F:25:23:60:E5:B6:E7:72:61:F1:D4:B9:21:D4:45:E9\n        DirName:/C=GB/ST=England/O=Alice Ltd/OU=Alice Ltd Certificate Authority/CN=Alice Ltd Root CA\n        serial:10:00\n\n    X509v3 Key Usage: critical\n        Digital Signature, Key Encipherment\n    X509v3 Extended Key Usage:\n        TLS Web Server Authentication\n</code></pre> <p>Use the CA certificate chain file we created earlier (ca-chain.cert.pem) to verify that the new certificate has a valid chain of trust.</p> <p><pre><code>openssl verify -CAfile intermediate/certs/ca-chain.cert.pem \\\n      intermediate/certs/www.example.com.cert.pem\n</code></pre> <pre><code>www.example.com.cert.pem: OK\n</code></pre></p>"},{"location":"guides/sign-server-and-client-certificate/#deploy-the-certificate","title":"Deploy the certificate","text":"<p>You can now either deploy your new certificate to a server, or distribute the certificate to a client. When deploying to a server application (eg, Apache), you need to make the following files available:</p> <ul> <li><code>ca-chain.cert.pem</code></li> <li><code>www.example.com.key.pem</code></li> <li><code>www.example.com.cert.pem</code></li> </ul> <p>If you\u2019re signing a CSR from a third-party, you don\u2019t have access to their private key so you only  need to give them back the chain file (ca-chain.cert.pem) and the certificate (www.example.com.cert.pem).</p>"}]}